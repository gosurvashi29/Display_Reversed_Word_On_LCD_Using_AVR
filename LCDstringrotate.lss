
LCDstringrotate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000001d8  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000082  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000009a2  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000009d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000560  00000000  00000000  00000a19  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001a2  00000000  00000000  00000f79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000280  00000000  00000000  0000111b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000172  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000257  00000000  00000000  000015a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000017f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  7a:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z8disp_cmdj>:
	disp_cmd(0X06);
}

void disp_cmd(unsigned int cmd)
{
	PORTB=((cmd & 0XF0)+0X04);
  82:	9c 01       	movw	r18, r24
  84:	20 7f       	andi	r18, 0xF0	; 240
  86:	33 27       	eor	r19, r19
  88:	2c 5f       	subi	r18, 0xFC	; 252
  8a:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	e9 ef       	ldi	r30, 0xF9	; 249
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <_Z8disp_cmdj+0xe>
  94:	00 c0       	rjmp	.+0      	; 0x96 <_Z8disp_cmdj+0x14>
  96:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB - 0X04;
  98:	98 b3       	in	r25, 0x18	; 24
  9a:	94 50       	subi	r25, 0x04	; 4
  9c:	98 bb       	out	0x18, r25	; 24
	PORTB=(((cmd<<4)& 0XF0)+0X04);
  9e:	82 95       	swap	r24
  a0:	80 7f       	andi	r24, 0xF0	; 240
  a2:	8c 5f       	subi	r24, 0xFC	; 252
  a4:	88 bb       	out	0x18, r24	; 24
  a6:	89 ef       	ldi	r24, 0xF9	; 249
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <_Z8disp_cmdj+0x28>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_Z8disp_cmdj+0x2e>
  b0:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB-0X04;
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	84 50       	subi	r24, 0x04	; 4
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	08 95       	ret

000000ba <_Z8lcd_initv>:
		return 0;
}

void lcd_init()
{
	disp_cmd(0X02);
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_cmd(0X28);
  c2:	88 e2       	ldi	r24, 0x28	; 40
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_cmd(0X0C);
  ca:	8c e0       	ldi	r24, 0x0C	; 12
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_cmd(0X06);
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
  da:	08 95       	ret

000000dc <_Z9disp_datai>:
	PORTB=PORTB-0X04;
	
}
void disp_data( int cmd)
{
	PORTB=((cmd  & 0XF0)+0X05);
  dc:	9c 01       	movw	r18, r24
  de:	20 7f       	andi	r18, 0xF0	; 240
  e0:	33 27       	eor	r19, r19
  e2:	2b 5f       	subi	r18, 0xFB	; 251
  e4:	28 bb       	out	0x18, r18	; 24
  e6:	e9 ef       	ldi	r30, 0xF9	; 249
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <_Z9disp_datai+0xe>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <_Z9disp_datai+0x14>
  f0:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB - 0X04;
  f2:	28 b3       	in	r18, 0x18	; 24
  f4:	24 50       	subi	r18, 0x04	; 4
  f6:	28 bb       	out	0x18, r18	; 24
	PORTB=(((cmd <<4)& 0XF0)+0X05);
  f8:	82 95       	swap	r24
  fa:	92 95       	swap	r25
  fc:	90 7f       	andi	r25, 0xF0	; 240
  fe:	98 27       	eor	r25, r24
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	98 27       	eor	r25, r24
 104:	8b 5f       	subi	r24, 0xFB	; 251
 106:	88 bb       	out	0x18, r24	; 24
 108:	89 ef       	ldi	r24, 0xF9	; 249
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <_Z9disp_datai+0x30>
 110:	00 c0       	rjmp	.+0      	; 0x112 <_Z9disp_datai+0x36>
 112:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB-0X04;
 114:	88 b3       	in	r24, 0x18	; 24
 116:	84 50       	subi	r24, 0x04	; 4
 118:	88 bb       	out	0x18, r24	; 24
 11a:	08 95       	ret

0000011c <_Z11disp_stringPc>:
	
}

void disp_string(char *str)
{
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	ec 01       	movw	r28, r24
	int i=0;
	while (str[i]!='\0')
 122:	88 81       	ld	r24, Y
 124:	88 23       	and	r24, r24
 126:	39 f0       	breq	.+14     	; 0x136 <_Z11disp_stringPc+0x1a>
	_delay_ms(1);
	PORTB=PORTB-0X04;
	
}

void disp_string(char *str)
 128:	21 96       	adiw	r28, 0x01	; 1
{
	int i=0;
	while (str[i]!='\0')
	{
		disp_data (str[i]);
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
}

void disp_string(char *str)
{
	int i=0;
	while (str[i]!='\0')
 130:	89 91       	ld	r24, Y+
 132:	81 11       	cpse	r24, r1
 134:	fa cf       	rjmp	.-12     	; 0x12a <_Z11disp_stringPc+0xe>
	{
		disp_data (str[i]);
		i++;
		
	}
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <main>:
void disp_num(unsigned int num);
void disp_string(char *str);

int main(void)
{
	DDRB = 0XFF;
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	87 bb       	out	0x17, r24	; 23
	int i;
	lcd_init();
 140:	0e 94 5d 00 	call	0xba	; 0xba <_Z8lcd_initv>
    while(1)
    {
		
		for (i=0X80;i<=0X8F;i++)
 144:	c0 e8       	ldi	r28, 0x80	; 128
 146:	d0 e0       	ldi	r29, 0x00	; 0
 148:	0f ec       	ldi	r16, 0xCF	; 207
 14a:	10 e0       	ldi	r17, 0x00	; 0
 14c:	68 94       	set
 14e:	ee 24       	eor	r14, r14
 150:	e7 f8       	bld	r14, 7
 152:	f1 2c       	mov	r15, r1
 154:	1b c0       	rjmp	.+54     	; 0x18c <main+0x50>
		{
		
		disp_cmd(i);
 156:	ce 01       	movw	r24, r28
 158:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
		disp_string("ABCD");
 15c:	80 e6       	ldi	r24, 0x60	; 96
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z11disp_stringPc>
 164:	2f e3       	ldi	r18, 0x3F	; 63
 166:	8d e0       	ldi	r24, 0x0D	; 13
 168:	93 e0       	ldi	r25, 0x03	; 3
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0x2e>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0x38>
 174:	00 00       	nop
		
		
		_delay_ms(1000);
		disp_cmd(0X01);
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
 17e:	83 ec       	ldi	r24, 0xC3	; 195
 180:	99 e0       	ldi	r25, 0x09	; 9
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0x46>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x4c>
 188:	00 00       	nop
	int i;
	lcd_init();
    while(1)
    {
		
		for (i=0X80;i<=0X8F;i++)
 18a:	21 96       	adiw	r28, 0x01	; 1
 18c:	c0 39       	cpi	r28, 0x90	; 144
 18e:	d1 05       	cpc	r29, r1
 190:	14 f3       	brlt	.-60     	; 0x156 <main+0x1a>
 192:	e8 01       	movw	r28, r16
		disp_cmd(0X01);
		_delay_ms(10);
        }
		for ( i=0XCF;i>=0XC0;i--)
		{
			disp_cmd(i);
 194:	ce 01       	movw	r24, r28
 196:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
			disp_string("ABCD");
 19a:	80 e6       	ldi	r24, 0x60	; 96
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z11disp_stringPc>
 1a2:	9f e3       	ldi	r25, 0x3F	; 63
 1a4:	2d e0       	ldi	r18, 0x0D	; 13
 1a6:	83 e0       	ldi	r24, 0x03	; 3
 1a8:	91 50       	subi	r25, 0x01	; 1
 1aa:	20 40       	sbci	r18, 0x00	; 0
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x6c>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x76>
 1b2:	00 00       	nop
			
			_delay_ms(1000);
			disp_cmd(0X01);
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
 1bc:	83 ec       	ldi	r24, 0xC3	; 195
 1be:	99 e0       	ldi	r25, 0x09	; 9
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <main+0x84>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x8a>
 1c6:	00 00       	nop
		
		_delay_ms(1000);
		disp_cmd(0X01);
		_delay_ms(10);
        }
		for ( i=0XCF;i>=0XC0;i--)
 1c8:	21 97       	sbiw	r28, 0x01	; 1
 1ca:	cf 3b       	cpi	r28, 0xBF	; 191
 1cc:	d1 05       	cpc	r29, r1
 1ce:	11 f7       	brne	.-60     	; 0x194 <main+0x58>
	int i;
	lcd_init();
    while(1)
    {
		
		for (i=0X80;i<=0X8F;i++)
 1d0:	e7 01       	movw	r28, r14
 1d2:	dc cf       	rjmp	.-72     	; 0x18c <main+0x50>

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
